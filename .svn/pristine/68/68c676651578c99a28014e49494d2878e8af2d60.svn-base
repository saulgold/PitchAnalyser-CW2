/**********************************************************************
*
* 
************************************************************************/
#include <p33FJ256GP506.h>
#include <board\inc\sask.h>
#include <board\inc\ex_sask_generic.h>
#include <dsp\inc\dsp.h>
#include <peripherals\adc\inc\ADCChannelDrv.h>
#include <peripherals\pwm\inc\OCPWMDrv.h>

#include "..\inc\filter.h"
#include "..\inc\modulator.h"
#include "..\inc\complexmultiply.h"

#define FRAME_SIZE 				ADC_CHANNEL_DMA_BUFSIZE
#define UPPER_CARRIER_FREQ 		625	
#define LOWER_CARRIER_FREQ 		62.5
#define CARRIER_INC				62.5
#define CARRIER_DEC				62.5
#define PRESSED					1
#define UNPRESSED				0

/* Allocate memory for input and output buffers	*/

fractional		adcBuffer		[ADC_CHANNEL_DMA_BUFSIZE] 	__attribute__((space(dma)));
fractional		ocPWMBuffer		[OCPWM_DMA_BUFSIZE]		__attribute__((space(dma)));

fractional		frctAudioIn			[FRAME_SIZE];
fractional		frctAudioWorkSpace	[FRAME_SIZE];
fractional		frctAudioOut		[FRAME_SIZE];
fractcomplex	compAudioOut		[FRAME_SIZE];
fractcomplex	compCarrierSignal	[FRAME_SIZE];

/* Instantiate the drivers 	*/
ADCChannelHandle adcChannelHandle;
OCPWMHandle 	ocPWMHandle;

/* Create the driver handles	*/
ADCChannelHandle *pADCChannelHandle 	= &adcChannelHandle;
OCPWMHandle 	*pOCPWMHandle 		= &ocPWMHandle;

int main(void)
{
	int iSwitch1Pressed = UNPRESSED;
	int iSwitch2Pressed = UNPRESSED;
	float fCarrierFrequency = 1;
	createCarrierSignal(fCarrierFrequency,FRAME_SIZE,compCarrierSignal);
	
	initFilter();

	ex_sask_init( );

	/* Initialise Audio input and output function	*/
	ADCChannelInit	(pADCChannelHandle,adcBuffer);			
	OCPWMInit		(pOCPWMHandle,ocPWMBuffer);			

	/* Start Audio input and output function	*/
	ADCChannelStart	(pADCChannelHandle);
	OCPWMStart		(pOCPWMHandle);	
	
	while(1)
	{		
		/* Read in the Audio Samples from the ADC	*/
		while(ADCChannelIsBusy(pADCChannelHandle));
		ADCChannelRead	(pADCChannelHandle,frctAudioIn,FRAME_SIZE);

		/*switch 1 is used to increase the carrier frequency and switch 2 is used to decrease it*/

		if(CheckSwitchS1() == PRESSED)//switch 1 is currently pressed  
		{
			if(iSwitch1Pressed == UNPRESSED)//switch 1 has just transitioned from unpressed to pressed
			{
				if(fCarrierFrequency < UPPER_CARRIER_FREQ)//the carrier frequency has not reached the upper limit
				{
					fCarrierFrequency += CARRIER_INC;//increment carrier frequency by set amount	
				}
				createCarrierSignal(fCarrierFrequency,FRAME_SIZE,compCarrierSignal);
				iSwitch1Pressed = PRESSED;
				GREEN_LED = SASK_LED_ON;
				YELLOW_LED = SASK_LED_ON;
				RED_LED = SASK_LED_OFF;			
			}		
		}
		else if(iSwitch1Pressed == PRESSED)//switch 1 has just transitioned from pressed to unpressed
		{
			iSwitch1Pressed = UNPRESSED;
			YELLOW_LED = SASK_LED_OFF;		
		}
	
		if((CheckSwitchS2()) == PRESSED)//switch 2 is currently pressed
		{
			if(iSwitch2Pressed == UNPRESSED)//switch 2 has just transitioned from unpressed to pressed
			{
				if(fCarrierFrequency > LOWER_CARRIER_FREQ)//the carrier frequency has not reached the lower limit
				{
					fCarrierFrequency -= CARRIER_DEC;//decrement carrier frequency by set amount	
				}
				createCarrierSignal(fCarrierFrequency,FRAME_SIZE,compCarrierSignal);
				iSwitch2Pressed = PRESSED;
				GREEN_LED = SASK_LED_OFF;
				YELLOW_LED = SASK_LED_ON;
				RED_LED = SASK_LED_ON;			
			}
		}
		else if(iSwitch2Pressed == PRESSED)//switch 2 has just transitioned from pressed to unpressed
		{
			iSwitch2Pressed = UNPRESSED;
			YELLOW_LED = SASK_LED_OFF;		
		}

		bandPassFilter(FRAME_SIZE,frctAudioWorkSpace,frctAudioIn);//filter out the audio signal's negative frequencies

		//frequency shift the audio signal by multiplying it by the carrier signal 
		combinationVectorMultiply(FRAME_SIZE,frctAudioOut,compAudioOut,frctAudioWorkSpace,compCarrierSignal);

		/* Wait till the OC is available for a new  frame	*/
		while(OCPWMIsBusy(pOCPWMHandle));	
	
		/* Write the real part of the frequency shifted complex audio signal to the output	*/
		OCPWMWrite (pOCPWMHandle,frctAudioOut,FRAME_SIZE);	
	}

	ADCChannelStop	(pADCChannelHandle);
	OCPWMStop	(pOCPWMHandle);	
}
